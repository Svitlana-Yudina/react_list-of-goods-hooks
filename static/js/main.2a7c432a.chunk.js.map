{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","isReversed","setRevers","NONE","sortType","setSortType","visibleGoods","goods","sort","good1","good2","ALPHABET","localeCompare","LENGTH","length","reverse","console","log","getReorderedGoods","isResetNeed","className","type","classNames","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,uBAAAA,I,mBAAAA,I,gBAAAA,M,KAwCE,IAAME,EAAgB,WAC3B,MAAgCC,oBAAS,GAAzC,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAgCF,mBAASH,EAASM,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KAEMC,EArCD,SACLC,EACAH,EACAH,GAGA,IAAMK,EAAY,YAAOC,GAwBzB,OArBAD,EAAaE,MAAK,SAACC,EAAOC,GACxB,OAAQN,GACN,KAAKP,EAASc,SACZ,OAAOF,EAAMG,cAAcF,GAE7B,KAAKb,EAASgB,OACZ,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,KAAKjB,EAASM,KACd,QACE,OAAO,MAITF,GACFK,EAAaS,UAIfC,QAAQC,IAAIb,EAAUH,GAEfK,EAOcY,CACnBpB,EACAM,EACAH,GAEIkB,GAA6B,IAAflB,GAAuBG,IAAaP,EAASM,KAmBjE,OACE,sBAAKiB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,iBACA,CACE,WAAYlB,IAAaP,EAASc,WAGtCY,QA5BkB,WACxBlB,EAAYR,EAASc,WAmBjB,iCAaA,wBACEU,KAAK,SACLD,UAAWE,IACT,oBACA,CACE,WAAYlB,IAAaP,EAASgB,SAGtCU,QArCa,WACnBlB,EAAYR,EAASgB,SA4BjB,4BAaA,wBACEQ,KAAK,SACLD,UAAWE,IACT,oBACA,CACE,YAAarB,IAGjBsB,QA9CQ,WACdrB,GAAWD,IAqCP,qBAaCkB,GACC,wBACEE,KAAK,SACLD,UAAU,4BACVG,QAnDI,WACZlB,EAAYR,EAASM,MACrBD,GAAU,IA8CJ,sBAUJ,6BACE,6BACGI,EAAakB,KAAI,SAAAC,GAAI,OACpB,oBAAe,UAAQ,OAAvB,SACGA,GADMA,cC3IrBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.2a7c432a.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classNames from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  ALPHABET,\n  LENGTH,\n  NONE,\n}\n\n// Use this function in the render to prepare goods\nexport function getReorderedGoods(\n  goods: string[],\n  sortType: SortType,\n  isReversed: boolean,\n) {\n  // To avoid the original array mutation\n  const visibleGoods = [...goods];\n\n  // Sort and reverse goods if needed\n  visibleGoods.sort((good1, good2) => {\n    switch (sortType) {\n      case SortType.ALPHABET:\n        return good1.localeCompare(good2);\n\n      case SortType.LENGTH:\n        return good1.length - good2.length;\n\n      case SortType.NONE:\n      default:\n        return 0;\n    }\n  });\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  // eslint-disable-next-line no-console\n  console.log(sortType, isReversed);\n\n  return visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [isReversed, setRevers] = useState(false);\n  const [sortType, setSortType] = useState(SortType.NONE);\n\n  const visibleGoods = getReorderedGoods(\n    goodsFromServer,\n    sortType,\n    isReversed,\n  );\n  const isResetNeed = isReversed === true || sortType !== SortType.NONE;\n\n  const sortAlphabeticaly = () => {\n    setSortType(SortType.ALPHABET);\n  };\n\n  const sortByLength = () => {\n    setSortType(SortType.LENGTH);\n  };\n\n  const reverse = () => {\n    setRevers(!isReversed);\n  };\n\n  const reset = () => {\n    setSortType(SortType.NONE);\n    setRevers(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-info',\n            {\n              'is-light': sortType !== SortType.ALPHABET,\n            },\n          )}\n          onClick={sortAlphabeticaly}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-success',\n            {\n              'is-light': sortType !== SortType.LENGTH,\n            },\n          )}\n          onClick={sortByLength}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-warning',\n            {\n              'is-light': !isReversed,\n            },\n          )}\n          onClick={reverse}\n        >\n          Reverse\n        </button>\n\n        {isResetNeed && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={reset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        <ul>\n          {visibleGoods.map(good => (\n            <li key={good} data-cy=\"Good\">\n              {good}\n            </li>\n          ))}\n        </ul>\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}